        -:    0:Source:D:/BSUIR/course2/PPOIS/lab3/Google_tests/LoginSystem_TEST.cpp
        -:    0:Graph:D:\BSUIR\course2\PPOIS\lab3\cmake-build-debug-coverage\Google_tests\CMakeFiles\Google_Tests_run.dir\LoginSystem_TEST.cpp.gcno
        -:    0:Data:D:\BSUIR\course2\PPOIS\lab3\cmake-build-debug-coverage\Google_tests\CMakeFiles\Google_Tests_run.dir\LoginSystem_TEST.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <gtest/gtest.h>
        -:    2:#include "LoginSystem.h"
        -:    3:#include <stdexcept> // Включение заголовка для std::invalid_argument
        -:    4:
        4:    5:TEST(LoginSystemTest, RegisterAndLoginTest) {
        1:    6:    LoginSystem loginSystem;
        -:    7:
        -:    8:    // Регистрация нового пользователя
        4:    9:    loginSystem.registerUser("user1", "password1");
       4*:   10:    EXPECT_TRUE(loginSystem.login("user1", "password1"));
       4*:   11:    EXPECT_FALSE(loginSystem.login("user1", "wrongpassword"));
       4*:   12:    EXPECT_FALSE(loginSystem.login("nonexistentuser", "password1"));
        1:   13:}
------------------
_ZN41LoginSystemTest_RegisterAndLoginTest_TestC1Ev:
        1:    5:TEST(LoginSystemTest, RegisterAndLoginTest) {
------------------
_ZN41LoginSystemTest_RegisterAndLoginTest_TestD0Ev:
        1:    5:TEST(LoginSystemTest, RegisterAndLoginTest) {
------------------
_ZN41LoginSystemTest_RegisterAndLoginTest_TestD1Ev:
        1:    5:TEST(LoginSystemTest, RegisterAndLoginTest) {
------------------
_ZN41LoginSystemTest_RegisterAndLoginTest_Test8TestBodyEv:
        1:    5:TEST(LoginSystemTest, RegisterAndLoginTest) {
        1:    6:    LoginSystem loginSystem;
        -:    7:
        -:    8:    // Регистрация нового пользователя
        4:    9:    loginSystem.registerUser("user1", "password1");
       4*:   10:    EXPECT_TRUE(loginSystem.login("user1", "password1"));
       4*:   11:    EXPECT_FALSE(loginSystem.login("user1", "wrongpassword"));
       4*:   12:    EXPECT_FALSE(loginSystem.login("nonexistentuser", "password1"));
        1:   13:}
------------------
        -:   14:
        4:   15:TEST(LoginSystemTest, RegisterDuplicateUserTest) {
        1:   16:    LoginSystem loginSystem;
        -:   17:
        -:   18:    // Регистрация нового пользователя
        3:   19:    loginSystem.registerUser("user1", "password1");
        -:   20:
        -:   21:    // Попытка повторной регистрации того же пользователя должна вызвать исключение
       5*:   22:    EXPECT_THROW(loginSystem.registerUser("user1", "password1"), std::invalid_argument);
        1:   23:}
------------------
_ZN46LoginSystemTest_RegisterDuplicateUserTest_TestC1Ev:
        1:   15:TEST(LoginSystemTest, RegisterDuplicateUserTest) {
------------------
_ZN46LoginSystemTest_RegisterDuplicateUserTest_TestD0Ev:
        1:   15:TEST(LoginSystemTest, RegisterDuplicateUserTest) {
------------------
_ZN46LoginSystemTest_RegisterDuplicateUserTest_TestD1Ev:
        1:   15:TEST(LoginSystemTest, RegisterDuplicateUserTest) {
------------------
_ZN46LoginSystemTest_RegisterDuplicateUserTest_Test8TestBodyEv:
        1:   15:TEST(LoginSystemTest, RegisterDuplicateUserTest) {
        1:   16:    LoginSystem loginSystem;
        -:   17:
        -:   18:    // Регистрация нового пользователя
        3:   19:    loginSystem.registerUser("user1", "password1");
        -:   20:
        -:   21:    // Попытка повторной регистрации того же пользователя должна вызвать исключение
       5*:   22:    EXPECT_THROW(loginSystem.registerUser("user1", "password1"), std::invalid_argument);
        1:   23:}
------------------
        -:   24:
        -:   25:
