        -:    0:Source:D:/BSUIR/course2/PPOIS/lab3/Google_tests/ProjectManager_TEST.cpp
        -:    0:Graph:D:\BSUIR\course2\PPOIS\lab3\cmake-build-debug-coverage\Google_tests\CMakeFiles\Google_Tests_run.dir\ProjectManager_TEST.cpp.gcno
        -:    0:Data:D:\BSUIR\course2\PPOIS\lab3\cmake-build-debug-coverage\Google_tests\CMakeFiles\Google_Tests_run.dir\ProjectManager_TEST.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <gtest/gtest.h>
        -:    2:#include "ProjectManager.h"
        -:    3:#include "Project.h"
        -:    4:#include "Task.h"
        -:    5:#include "Employee.h"
        -:    6:#include "ContactInfo.h"
        -:    7:#include "Address.h"
        -:    8:
        4:    9:TEST(ProjectManagerTest, ConstructorTest) {
        4:   10:    ContactInfo contact("123-456-7890", "alice.brown@example.com");
        4:   11:    Address address("Minsk", "Gorkogo", 20);
        5:   12:    ProjectManager pm(3, "Alice", "Brown", "Manager", 60, 500, contact, address);
        -:   13:
       1*:   14:    EXPECT_EQ(pm.getID(), 3);
       1*:   15:    EXPECT_EQ(pm.getFirstName(), "Alice");
       1*:   16:    EXPECT_EQ(pm.getLastName(), "Brown");
       1*:   17:    EXPECT_EQ(pm.getPosition(), "Manager");
       1*:   18:    EXPECT_EQ(pm.getHourlyRate(), 60);
       1*:   19:    EXPECT_EQ(pm.getContactInfo().getPhone(), "123-456-7890");
       1*:   20:    EXPECT_EQ(pm.getContactInfo().getEmail(), "alice.brown@example.com");
       1*:   21:    EXPECT_EQ(pm.getAddress().getCity(), "Minsk");
       1*:   22:    EXPECT_EQ(pm.getAddress().getStreet(), "Gorkogo");
       1*:   23:    EXPECT_EQ(pm.getAddress().getHouseNumber(), 20);
        1:   24:}
------------------
_ZN39ProjectManagerTest_ConstructorTest_TestC1Ev:
        1:    9:TEST(ProjectManagerTest, ConstructorTest) {
------------------
_ZN39ProjectManagerTest_ConstructorTest_TestD0Ev:
        1:    9:TEST(ProjectManagerTest, ConstructorTest) {
------------------
_ZN39ProjectManagerTest_ConstructorTest_TestD1Ev:
        1:    9:TEST(ProjectManagerTest, ConstructorTest) {
------------------
_ZN39ProjectManagerTest_ConstructorTest_Test8TestBodyEv:
        1:    9:TEST(ProjectManagerTest, ConstructorTest) {
        4:   10:    ContactInfo contact("123-456-7890", "alice.brown@example.com");
        4:   11:    Address address("Minsk", "Gorkogo", 20);
        5:   12:    ProjectManager pm(3, "Alice", "Brown", "Manager", 60, 500, contact, address);
        -:   13:
       1*:   14:    EXPECT_EQ(pm.getID(), 3);
       1*:   15:    EXPECT_EQ(pm.getFirstName(), "Alice");
       1*:   16:    EXPECT_EQ(pm.getLastName(), "Brown");
       1*:   17:    EXPECT_EQ(pm.getPosition(), "Manager");
       1*:   18:    EXPECT_EQ(pm.getHourlyRate(), 60);
       1*:   19:    EXPECT_EQ(pm.getContactInfo().getPhone(), "123-456-7890");
       1*:   20:    EXPECT_EQ(pm.getContactInfo().getEmail(), "alice.brown@example.com");
       1*:   21:    EXPECT_EQ(pm.getAddress().getCity(), "Minsk");
       1*:   22:    EXPECT_EQ(pm.getAddress().getStreet(), "Gorkogo");
       1*:   23:    EXPECT_EQ(pm.getAddress().getHouseNumber(), 20);
        1:   24:}
------------------
        -:   25:
        4:   26:TEST(ProjectManagerTest, ManageProjectTest) {
        4:   27:    ContactInfo contact("123-456-7890", "alice.brown@example.com");
        4:   28:    Address address("Minsk", "Gorkogo", 20);
        6:   29:    ProjectManager pm(3, "Alice", "Brown", "Manager", 60, 500, contact, address);
        2:   30:    Project project("New Project");
        -:   31:
        4:   32:    Task task1("Task 1", "2024-11-30");
        3:   33:    Task task2("Task 2", "2024-12-15");
        1:   34:    project.addTask(&task1);
        1:   35:    project.addTask(&task2);
        -:   36:
        4:   37:    ContactInfo empContact("123-456-7890", "john.doe@example.com");
        4:   38:    Address empAddress("Minsk", "Lenina", 10);
        5:   39:    Employee emp(1, "John", "Doe", "Developer", 50, empContact, empAddress);
        1:   40:    project.addEmployee(&emp);
        -:   41:
        -:   42:    // Перехват стандартного вывода
        1:   43:    testing::internal::CaptureStdout();
        1:   44:    pm.manageProject(project);
        1:   45:    std::string output = testing::internal::GetCapturedStdout();
        -:   46:
        -:   47:    std::string expectedOutput =
        -:   48:        "Project: New Project\n"
        -:   49:        "Tasks:\n"
        -:   50:        "- Task 1 (Due: 2024-11-30, Status: Not Completed)\n"
        -:   51:        "- Task 2 (Due: 2024-12-15, Status: Not Completed)\n"
        -:   52:        "Employees:\n"
        1:   53:        "- John Doe\n";
        -:   54:
       1*:   55:    EXPECT_EQ(output, expectedOutput);
        1:   56:}
------------------
_ZN41ProjectManagerTest_ManageProjectTest_TestC1Ev:
        1:   26:TEST(ProjectManagerTest, ManageProjectTest) {
------------------
_ZN41ProjectManagerTest_ManageProjectTest_TestD0Ev:
        1:   26:TEST(ProjectManagerTest, ManageProjectTest) {
------------------
_ZN41ProjectManagerTest_ManageProjectTest_TestD1Ev:
        1:   26:TEST(ProjectManagerTest, ManageProjectTest) {
------------------
_ZN41ProjectManagerTest_ManageProjectTest_Test8TestBodyEv:
        1:   26:TEST(ProjectManagerTest, ManageProjectTest) {
        4:   27:    ContactInfo contact("123-456-7890", "alice.brown@example.com");
        4:   28:    Address address("Minsk", "Gorkogo", 20);
        6:   29:    ProjectManager pm(3, "Alice", "Brown", "Manager", 60, 500, contact, address);
        2:   30:    Project project("New Project");
        -:   31:
        4:   32:    Task task1("Task 1", "2024-11-30");
        3:   33:    Task task2("Task 2", "2024-12-15");
        1:   34:    project.addTask(&task1);
        1:   35:    project.addTask(&task2);
        -:   36:
        4:   37:    ContactInfo empContact("123-456-7890", "john.doe@example.com");
        4:   38:    Address empAddress("Minsk", "Lenina", 10);
        5:   39:    Employee emp(1, "John", "Doe", "Developer", 50, empContact, empAddress);
        1:   40:    project.addEmployee(&emp);
        -:   41:
        -:   42:    // Перехват стандартного вывода
        1:   43:    testing::internal::CaptureStdout();
        1:   44:    pm.manageProject(project);
        1:   45:    std::string output = testing::internal::GetCapturedStdout();
        -:   46:
        -:   47:    std::string expectedOutput =
        -:   48:        "Project: New Project\n"
        -:   49:        "Tasks:\n"
        -:   50:        "- Task 1 (Due: 2024-11-30, Status: Not Completed)\n"
        -:   51:        "- Task 2 (Due: 2024-12-15, Status: Not Completed)\n"
        -:   52:        "Employees:\n"
        1:   53:        "- John Doe\n";
        -:   54:
       1*:   55:    EXPECT_EQ(output, expectedOutput);
        1:   56:}
------------------
        -:   57:
