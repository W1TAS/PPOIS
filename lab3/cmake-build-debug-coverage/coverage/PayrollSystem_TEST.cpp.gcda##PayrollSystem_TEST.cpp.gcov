        -:    0:Source:D:/BSUIR/course2/PPOIS/lab3/Google_tests/PayrollSystem_TEST.cpp
        -:    0:Graph:D:\BSUIR\course2\PPOIS\lab3\cmake-build-debug-coverage\Google_tests\CMakeFiles\Google_Tests_run.dir\PayrollSystem_TEST.cpp.gcno
        -:    0:Data:D:\BSUIR\course2\PPOIS\lab3\cmake-build-debug-coverage\Google_tests\CMakeFiles\Google_Tests_run.dir\PayrollSystem_TEST.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <gtest/gtest.h>
        -:    2:#include "PayrollSystem.h"
        -:    3:#include "Company.h"
        -:    4:#include "Department.h"
        -:    5:#include "Employee.h"
        -:    6:#include "Manager.h"
        -:    7:
        4:    8:TEST(PayrollSystemTest, InitializeTest) {
        1:    9:    Company company("Tech Corp");
        1:   10:    PayrollSystem payrollSystem(company);
        -:   11:
        -:   12:    // Перехват стандартного вывода
        1:   13:    testing::internal::CaptureStdout();
        1:   14:    payrollSystem.initialize();
        1:   15:    std::string output = testing::internal::GetCapturedStdout();
        -:   16:
       1*:   17:    EXPECT_EQ(output, "Payroll system initialized for company: Tech Corp\n");
        1:   18:}
------------------
_ZN37PayrollSystemTest_InitializeTest_TestC1Ev:
        1:    8:TEST(PayrollSystemTest, InitializeTest) {
------------------
_ZN37PayrollSystemTest_InitializeTest_TestD0Ev:
        1:    8:TEST(PayrollSystemTest, InitializeTest) {
------------------
_ZN37PayrollSystemTest_InitializeTest_TestD1Ev:
        1:    8:TEST(PayrollSystemTest, InitializeTest) {
------------------
_ZN37PayrollSystemTest_InitializeTest_Test8TestBodyEv:
        1:    8:TEST(PayrollSystemTest, InitializeTest) {
        1:    9:    Company company("Tech Corp");
        1:   10:    PayrollSystem payrollSystem(company);
        -:   11:
        -:   12:    // Перехват стандартного вывода
        1:   13:    testing::internal::CaptureStdout();
        1:   14:    payrollSystem.initialize();
        1:   15:    std::string output = testing::internal::GetCapturedStdout();
        -:   16:
       1*:   17:    EXPECT_EQ(output, "Payroll system initialized for company: Tech Corp\n");
        1:   18:}
------------------
        -:   19:
        4:   20:TEST(PayrollSystemTest, GenerateReportTest) {
        1:   21:    Company company("Tech Corp");
        1:   22:    PayrollSystem payrollSystem(company);
        -:   23:
        2:   24:    Department dept1("IT");
       14:   25:    Employee emp1(1, "John", "Doe", "Developer", 50, ContactInfo("123-456-7890", "john.doe@example.com"), Address("Minsk", "Lenina", 10));
       14:   26:    Employee emp2(2, "Jane", "Smith", "Designer", 45, ContactInfo("098-765-4321", "jane.smith@example.com"), Address("Minsk", "Pushkina", 15));
       13:   27:    Manager mgr1(3, "Alice", "Brown", "Manager", 60, 500, ContactInfo("111-222-3333", "alice.brown@example.com"), Address("Minsk", "Gorkogo", 20));
        -:   28:
        1:   29:    emp1.updateHoursWorked(160);
        1:   30:    emp2.updateHoursWorked(160);
        1:   31:    mgr1.updateHoursWorked(160);
        -:   32:
        1:   33:    dept1.addEmployee(&emp1);
        1:   34:    dept1.addEmployee(&emp2);
        1:   35:    dept1.addEmployee(&mgr1);
        1:   36:    company.addDepartment(dept1);
        -:   37:
        -:   38:    // Перехват стандартного вывода
        1:   39:    testing::internal::CaptureStdout();
        1:   40:    payrollSystem.generateReport();
        1:   41:    std::string output = testing::internal::GetCapturedStdout();
        -:   42:
        1:   43:    double totalSalary = emp1.calculateSalary() + emp2.calculateSalary() + mgr1.calculateSalary();
        1:   44:    std::ostringstream expectedOutput;
        1:   45:    expectedOutput << "Generating payroll report...\nTotal salary: $" << totalSalary << "\n";
        -:   46:
       1*:   47:    EXPECT_EQ(output, expectedOutput.str());
        1:   48:}
------------------
_ZN41PayrollSystemTest_GenerateReportTest_TestC1Ev:
        1:   20:TEST(PayrollSystemTest, GenerateReportTest) {
------------------
_ZN41PayrollSystemTest_GenerateReportTest_TestD0Ev:
        1:   20:TEST(PayrollSystemTest, GenerateReportTest) {
------------------
_ZN41PayrollSystemTest_GenerateReportTest_TestD1Ev:
        1:   20:TEST(PayrollSystemTest, GenerateReportTest) {
------------------
_ZN41PayrollSystemTest_GenerateReportTest_Test8TestBodyEv:
        1:   20:TEST(PayrollSystemTest, GenerateReportTest) {
        1:   21:    Company company("Tech Corp");
        1:   22:    PayrollSystem payrollSystem(company);
        -:   23:
        2:   24:    Department dept1("IT");
       14:   25:    Employee emp1(1, "John", "Doe", "Developer", 50, ContactInfo("123-456-7890", "john.doe@example.com"), Address("Minsk", "Lenina", 10));
       14:   26:    Employee emp2(2, "Jane", "Smith", "Designer", 45, ContactInfo("098-765-4321", "jane.smith@example.com"), Address("Minsk", "Pushkina", 15));
       13:   27:    Manager mgr1(3, "Alice", "Brown", "Manager", 60, 500, ContactInfo("111-222-3333", "alice.brown@example.com"), Address("Minsk", "Gorkogo", 20));
        -:   28:
        1:   29:    emp1.updateHoursWorked(160);
        1:   30:    emp2.updateHoursWorked(160);
        1:   31:    mgr1.updateHoursWorked(160);
        -:   32:
        1:   33:    dept1.addEmployee(&emp1);
        1:   34:    dept1.addEmployee(&emp2);
        1:   35:    dept1.addEmployee(&mgr1);
        1:   36:    company.addDepartment(dept1);
        -:   37:
        -:   38:    // Перехват стандартного вывода
        1:   39:    testing::internal::CaptureStdout();
        1:   40:    payrollSystem.generateReport();
        1:   41:    std::string output = testing::internal::GetCapturedStdout();
        -:   42:
        1:   43:    double totalSalary = emp1.calculateSalary() + emp2.calculateSalary() + mgr1.calculateSalary();
        1:   44:    std::ostringstream expectedOutput;
        1:   45:    expectedOutput << "Generating payroll report...\nTotal salary: $" << totalSalary << "\n";
        -:   46:
       1*:   47:    EXPECT_EQ(output, expectedOutput.str());
        1:   48:}
------------------
        -:   49:
