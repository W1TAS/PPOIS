        -:    0:Source:D:/BSUIR/course2/PPOIS/lab3/Google_tests/lib/googletest/src/gtest-assertion-result.cc
        -:    0:Graph:D:\BSUIR\course2\PPOIS\lab3\cmake-build-debug-coverage\Google_tests\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:D:\BSUIR\course2\PPOIS\lab3\cmake-build-debug-coverage\Google_tests\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   31://
        -:   32:// This file defines the AssertionResult type.
        -:   33:
        -:   34:#include "gtest/gtest-assertion-result.h"
        -:   35:
        -:   36:#include <string>
        -:   37:#include <utility>
        -:   38:
        -:   39:#include "gtest/gtest-message.h"
        -:   40:
        -:   41:namespace testing {
        -:   42:
        -:   43:// AssertionResult constructors.
        -:   44:// Used in EXPECT_TRUE/FALSE(assertion_result).
    #####:   45:AssertionResult::AssertionResult(const AssertionResult& other)
    #####:   46:    : success_(other.success_),
    #####:   47:      message_(other.message_ != nullptr
    #####:   48:                   ? new ::std::string(*other.message_)
    #####:   49:                   : static_cast< ::std::string*>(nullptr)) {}
        -:   50:
        -:   51:// Swaps two AssertionResults.
    #####:   52:void AssertionResult::swap(AssertionResult& other) {
        -:   53:  using std::swap;
    #####:   54:  swap(success_, other.success_);
    #####:   55:  swap(message_, other.message_);
    #####:   56:}
        -:   57:
        -:   58:// Returns the assertion's negation. Used with EXPECT/ASSERT_FALSE.
    #####:   59:AssertionResult AssertionResult::operator!() const {
    #####:   60:  AssertionResult negation(!success_);
    #####:   61:  if (message_ != nullptr) negation << *message_;
    #####:   62:  return negation;
    =====:   63:}
        -:   64:
        -:   65:// Makes a successful assertion result.
       87:   66:AssertionResult AssertionSuccess() { return AssertionResult(true); }
        -:   67:
        -:   68:// Makes a failed assertion result.
    #####:   69:AssertionResult AssertionFailure() { return AssertionResult(false); }
        -:   70:
        -:   71:// Makes a failed assertion result with the given failure message.
        -:   72:// Deprecated; use AssertionFailure() << message.
    #####:   73:AssertionResult AssertionFailure(const Message& message) {
    #####:   74:  return AssertionFailure() << message;
        -:   75:}
        -:   76:
        -:   77:}  // namespace testing
